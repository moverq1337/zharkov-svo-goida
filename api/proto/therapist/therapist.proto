syntax = "proto3";
package voenkomat.therapist;

option go_package = "pkg/api/grpc/golang/therapist";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


service TherapistService {
  rpc Next(google.protobuf.Empty) returns (NextRs){
    option (google.api.http) = {
      post: "/therapist/next"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Next",
      description: "Следующий призывник"
    };
  }
  rpc Verdict(VerdictRq) returns (google.protobuf.Empty){
    option (google.api.http) = {
      post: "/therapist/verdict"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Verdict",
      description: "Вынести вердикт"
    };
  }
}

message NextRs {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Next Resposne",
      description: "ответ на запрос на следующего призывника"
    }
  };

  string name = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title: "Name",
    description: "Имя пользователя"
  }];
  string surname = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title: "Surname",
    description: "Фамилия пользователя"
  }];
  string patronymic = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title: "Patronymic",
    description: "Отчество пользователя"
  }];
  int32 age = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title: "Age",
    description: "Возраст пользователя"
  }];
  string id = 5 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title: "Id",
    description: "Id пользователя"
  }];
  repeated conclusion conclusions = 6 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title: "Conclusions",
    description: "Заключения врачей"
  }];
}

message conclusion {
  string doctor_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title: "Doctor Id",
    description: "Id врача"
  }];
  bool is_fit = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title: "Is Fit",
    description: "Пометка годности призывника"
  }];
  string report = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title: "Report",
    description: "Заключение врача"
  }];
}

message VerdictRq {
  string user_id = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title: "User Id",
    description: "Id призывника"
  }];
  FitCategory fit_category = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title: "Fit Category",
    description: "Категория призывника"
  }];
  string report = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    title: "Report",
    description: "Отчет врача"
  }];
}

enum FitCategory {
  A = 0;
  B = 1;
  V = 3;
  G = 4;
  D = 5;
}
