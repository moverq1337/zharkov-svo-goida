// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: therapist/therapist.proto

package therapist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TherapistService_Next_FullMethodName    = "/voenkomat.therapist.TherapistService/Next"
	TherapistService_Verdict_FullMethodName = "/voenkomat.therapist.TherapistService/Verdict"
)

// TherapistServiceClient is the client API for TherapistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TherapistServiceClient interface {
	Next(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NextRs, error)
	Verdict(ctx context.Context, in *VerdictRq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type therapistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTherapistServiceClient(cc grpc.ClientConnInterface) TherapistServiceClient {
	return &therapistServiceClient{cc}
}

func (c *therapistServiceClient) Next(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NextRs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NextRs)
	err := c.cc.Invoke(ctx, TherapistService_Next_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *therapistServiceClient) Verdict(ctx context.Context, in *VerdictRq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TherapistService_Verdict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TherapistServiceServer is the server API for TherapistService service.
// All implementations must embed UnimplementedTherapistServiceServer
// for forward compatibility.
type TherapistServiceServer interface {
	Next(context.Context, *emptypb.Empty) (*NextRs, error)
	Verdict(context.Context, *VerdictRq) (*emptypb.Empty, error)
	mustEmbedUnimplementedTherapistServiceServer()
}

// UnimplementedTherapistServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTherapistServiceServer struct{}

func (UnimplementedTherapistServiceServer) Next(context.Context, *emptypb.Empty) (*NextRs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}
func (UnimplementedTherapistServiceServer) Verdict(context.Context, *VerdictRq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verdict not implemented")
}
func (UnimplementedTherapistServiceServer) mustEmbedUnimplementedTherapistServiceServer() {}
func (UnimplementedTherapistServiceServer) testEmbeddedByValue()                          {}

// UnsafeTherapistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TherapistServiceServer will
// result in compilation errors.
type UnsafeTherapistServiceServer interface {
	mustEmbedUnimplementedTherapistServiceServer()
}

func RegisterTherapistServiceServer(s grpc.ServiceRegistrar, srv TherapistServiceServer) {
	// If the following call pancis, it indicates UnimplementedTherapistServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TherapistService_ServiceDesc, srv)
}

func _TherapistService_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TherapistServiceServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TherapistService_Next_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TherapistServiceServer).Next(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TherapistService_Verdict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerdictRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TherapistServiceServer).Verdict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TherapistService_Verdict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TherapistServiceServer).Verdict(ctx, req.(*VerdictRq))
	}
	return interceptor(ctx, in, info, handler)
}

// TherapistService_ServiceDesc is the grpc.ServiceDesc for TherapistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TherapistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voenkomat.therapist.TherapistService",
	HandlerType: (*TherapistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Next",
			Handler:    _TherapistService_Next_Handler,
		},
		{
			MethodName: "Verdict",
			Handler:    _TherapistService_Verdict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "therapist/therapist.proto",
}
