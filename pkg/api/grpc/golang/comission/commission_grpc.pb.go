// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: comission/commission.proto

package comission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ComissionService_AddDoctor_FullMethodName    = "/voenkomat.comission.ComissionService/AddDoctor"
	ComissionService_AddConscript_FullMethodName = "/voenkomat.comission.ComissionService/AddConscript"
	ComissionService_GetDoctor_FullMethodName    = "/voenkomat.comission.ComissionService/GetDoctor"
)

// ComissionServiceClient is the client API for ComissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComissionServiceClient interface {
	AddDoctor(ctx context.Context, in *AddDoctorRq, opts ...grpc.CallOption) (*AddDoctorRs, error)
	AddConscript(ctx context.Context, in *AddConscriptRq, opts ...grpc.CallOption) (*AddConscriptRs, error)
	GetDoctor(ctx context.Context, in *GetDocotrRq, opts ...grpc.CallOption) (*GetDoctorRs, error)
}

type comissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComissionServiceClient(cc grpc.ClientConnInterface) ComissionServiceClient {
	return &comissionServiceClient{cc}
}

func (c *comissionServiceClient) AddDoctor(ctx context.Context, in *AddDoctorRq, opts ...grpc.CallOption) (*AddDoctorRs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDoctorRs)
	err := c.cc.Invoke(ctx, ComissionService_AddDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comissionServiceClient) AddConscript(ctx context.Context, in *AddConscriptRq, opts ...grpc.CallOption) (*AddConscriptRs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddConscriptRs)
	err := c.cc.Invoke(ctx, ComissionService_AddConscript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comissionServiceClient) GetDoctor(ctx context.Context, in *GetDocotrRq, opts ...grpc.CallOption) (*GetDoctorRs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDoctorRs)
	err := c.cc.Invoke(ctx, ComissionService_GetDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComissionServiceServer is the server API for ComissionService service.
// All implementations must embed UnimplementedComissionServiceServer
// for forward compatibility.
type ComissionServiceServer interface {
	AddDoctor(context.Context, *AddDoctorRq) (*AddDoctorRs, error)
	AddConscript(context.Context, *AddConscriptRq) (*AddConscriptRs, error)
	GetDoctor(context.Context, *GetDocotrRq) (*GetDoctorRs, error)
	mustEmbedUnimplementedComissionServiceServer()
}

// UnimplementedComissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComissionServiceServer struct{}

func (UnimplementedComissionServiceServer) AddDoctor(context.Context, *AddDoctorRq) (*AddDoctorRs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDoctor not implemented")
}
func (UnimplementedComissionServiceServer) AddConscript(context.Context, *AddConscriptRq) (*AddConscriptRs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConscript not implemented")
}
func (UnimplementedComissionServiceServer) GetDoctor(context.Context, *GetDocotrRq) (*GetDoctorRs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctor not implemented")
}
func (UnimplementedComissionServiceServer) mustEmbedUnimplementedComissionServiceServer() {}
func (UnimplementedComissionServiceServer) testEmbeddedByValue()                          {}

// UnsafeComissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComissionServiceServer will
// result in compilation errors.
type UnsafeComissionServiceServer interface {
	mustEmbedUnimplementedComissionServiceServer()
}

func RegisterComissionServiceServer(s grpc.ServiceRegistrar, srv ComissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedComissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ComissionService_ServiceDesc, srv)
}

func _ComissionService_AddDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDoctorRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComissionServiceServer).AddDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComissionService_AddDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComissionServiceServer).AddDoctor(ctx, req.(*AddDoctorRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComissionService_AddConscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConscriptRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComissionServiceServer).AddConscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComissionService_AddConscript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComissionServiceServer).AddConscript(ctx, req.(*AddConscriptRq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComissionService_GetDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocotrRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComissionServiceServer).GetDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComissionService_GetDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComissionServiceServer).GetDoctor(ctx, req.(*GetDocotrRq))
	}
	return interceptor(ctx, in, info, handler)
}

// ComissionService_ServiceDesc is the grpc.ServiceDesc for ComissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voenkomat.comission.ComissionService",
	HandlerType: (*ComissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDoctor",
			Handler:    _ComissionService_AddDoctor_Handler,
		},
		{
			MethodName: "AddConscript",
			Handler:    _ComissionService_AddConscript_Handler,
		},
		{
			MethodName: "GetDoctor",
			Handler:    _ComissionService_GetDoctor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comission/commission.proto",
}
